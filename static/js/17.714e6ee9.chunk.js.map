{"version":3,"sources":["views/utilities/TablePaginationActions.js","services/campaignService.js","views/pages/campaign/List.js"],"names":["TablePaginationActions","props","theme","useTheme","count","page","rowsPerPage","onPageChange","sx","flexShrink","ml","onClick","event","disabled","direction","Math","ceil","max","basePath","fetchCampaignList","pageSize","useCache","dispatch","getState","moreFilter","url","apiService","get","response","setListCampaign","console","error","message","postCampaign","data","_dispatch","post","then","CampaignList","campaign","useSelector","state","items","totalItems","totalPages","useDispatch","navigate","useNavigate","matchDownSM","useMediaQuery","breakpoints","down","React","setPage","useEffect","fetchData","catch","columns","id","label","minWidth","align","emptyRows","container","alignItems","justifyContent","spacing","item","mb","xs","md","cursor","disableElevation","fullWidth","size","variant","color","code","component","Paper","map","column","index","style","row","scope","fontWeight","title","ISODateFormat","startDate","endDate","active","height","colSpan","length","rowsPerPageOptions","SelectProps","inputProps","native","_event","newPage","ActionsComponent"],"mappings":"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","file":"static/js/17.714e6ee9.chunk.js","sourcesContent":["import { useTheme } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport LastPageIcon from '@mui/icons-material/LastPage';\r\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TablePaginationActions(props) {\r\n    const theme = useTheme();\r\n    const { count, page, rowsPerPage, onPageChange } = props;\r\n\r\n    const handleFirstPageButtonClick = (event) => {\r\n        onPageChange(event, 0);\r\n    };\r\n\r\n    const handleBackButtonClick = (event) => {\r\n        onPageChange(event, page - 1);\r\n    };\r\n\r\n    const handleNextButtonClick = (event) => {\r\n        onPageChange(event, page + 1);\r\n    };\r\n\r\n    const handleLastPageButtonClick = (event) => {\r\n        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ flexShrink: 0, ml: 2.5 }}>\r\n            <IconButton onClick={handleFirstPageButtonClick} disabled={page === 0} aria-label=\"first page\">\r\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n            </IconButton>\r\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n            </IconButton>\r\n            <IconButton onClick={handleNextButtonClick} disabled={page >= Math.ceil(count / rowsPerPage) - 1} aria-label=\"next page\">\r\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n            </IconButton>\r\n            <IconButton onClick={handleLastPageButtonClick} disabled={page >= Math.ceil(count / rowsPerPage) - 1} aria-label=\"last page\">\r\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n            </IconButton>\r\n        </Box>\r\n    );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n    count: PropTypes.number,\r\n    onPageChange: PropTypes.func,\r\n    page: PropTypes.number,\r\n    rowsPerPage: PropTypes.number\r\n};\r\n\r\nexport default TablePaginationActions;\r\n","import apiService from './apiService';\r\nimport { setListCampaign } from 'store/reducers/campaignReducer';\r\n\r\nconst basePath = '/api/v1/campaign';\r\n\r\n/**\r\n * Fetch to campaign data\r\n * @async\r\n * @function\r\n * @return {Promise<JSON>} Object campaign data\r\n */\r\nexport function fetchCampaignList({ page = 1, pageSize = 50, useCache = false }) {\r\n    return async function fetchCampaignThunk(dispatch, getState) {\r\n        const moreFilter = `&useCache=${useCache}`;\r\n        try {\r\n            const url = `${basePath}/filter?pageSize=${pageSize}&page=${page}${moreFilter}`;\r\n            const response = await apiService(getState()).get(url);\r\n            await dispatch(setListCampaign(response));\r\n            return response;\r\n        } catch (ex) {\r\n            console.error('Error Fetch Campaign', ex.message);\r\n            return null;\r\n        }\r\n    };\r\n}\r\n\r\nexport function postCampaign(data) {\r\n    return async function postCampaignThunk(_dispatch, getState) {\r\n        try {\r\n            await apiService(getState())\r\n                .post(basePath, data)\r\n                .then((response) => response?.data);\r\n            return true;\r\n        } catch (ex) {\r\n            console.error('Error Post Campaign: ', ex.message);\r\n            throw ex;\r\n        }\r\n    };\r\n}\r\n","import * as React from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableFooter from '@mui/material/TableFooter';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport TableHead from '@mui/material/TableHead';\r\n\r\n// project imports\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Button, useMediaQuery, Grid } from '@mui/material';\r\nimport AnimateButton from '../../../ui-component/extended/AnimateButton';\r\nimport TablePaginationActions from '../../utilities/TablePaginationActions';\r\nimport { fetchCampaignList } from 'services/campaignService';\r\nimport { ISODateFormat } from '../../../utils/utility';\r\n\r\n// ==============================|| CAMPAIGN PAGE ||============================== //\r\n\r\nfunction CampaignList() {\r\n    const theme = useTheme();\r\n    const campaign = useSelector((state) => state.campaign);\r\n    const { items, totalItems, pageSize, totalPages } = campaign;\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\r\n    const [page, setPage] = React.useState(0);\r\n    async function fetchData() {\r\n        await dispatch(fetchCampaignList({}));\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData().catch();\r\n    }, [dispatch]);\r\n\r\n    const columns = [\r\n        { id: 'title', label: 'Título', minWidth: 100, align: 'left' },\r\n        { id: 'startDate', label: 'Início', minWidth: 120, align: 'center' },\r\n        { id: 'endDate', label: 'Fim', minWidth: 120, align: 'center' },\r\n        { id: 'active', label: 'Ativa', minWidth: 100, align: 'center' },\r\n        { id: 'actions', label: 'Ações', minWidth: 100, align: 'center' }\r\n    ];\r\n\r\n    // Avoid a layout jump when reaching the last page with empty rows.\r\n    const emptyRows = totalItems > 10 ? Math.max(0, (1 + totalItems) * pageSize - totalItems) : 10;\r\n\r\n    const handleChangePage = (_event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleEdit = (item) => {\r\n        navigate('/campaign/manager', { state: { code: item.code } });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container alignItems=\"end\" sx={{ justifyContent: 'end' }} spacing={matchDownSM ? 0 : 2}>\r\n                <Grid item sx={{ mb: 1 }} xs={12} md={2}>\r\n                    <Box>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                sx={{ '& :hover': { cursor: 'pointer' } }}\r\n                                disableElevation\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                variant=\"contained\"\r\n                                color=\"success\"\r\n                                onClick={() => navigate('/campaign/manager', { state: { code: null } })}\r\n                            >\r\n                                Novo\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n            <TableContainer component={Paper}>\r\n                <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {columns.map((column, index) => (\r\n                                <TableCell\r\n                                    key={`campaign_${column.id}_${index}`}\r\n                                    align={column.align}\r\n                                    style={{ minWidth: column.minWidth }}\r\n                                >\r\n                                    {column.label}\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {items.map((row) => (\r\n                            <TableRow key={row.title}>\r\n                                <TableCell component=\"th\" scope=\"row\" style={{ fontWeight: 'bold' }}>\r\n                                    {row.title}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                                    {ISODateFormat(row?.startDate)}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                                    {ISODateFormat(row?.endDate)}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                                    {row.active ? 'SIM' : 'NÃO'}\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    sx={{ '& :hover': { cursor: 'pointer' } }}\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    onClick={() => handleEdit(row)}\r\n                                    align=\"center\"\r\n                                >\r\n                                    <EditIcon />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n\r\n                        {emptyRows > 0 && (\r\n                            <TableRow style={{ height: 53 * emptyRows }}>\r\n                                <TableCell colSpan={6} />\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                    <TableFooter>\r\n                        <TableRow>\r\n                            <TablePagination\r\n                                colSpan={columns.length}\r\n                                count={totalPages}\r\n                                rowsPerPage={pageSize}\r\n                                page={page}\r\n                                rowsPerPageOptions={[pageSize]}\r\n                                SelectProps={{\r\n                                    inputProps: {\r\n                                        'aria-label': 'rows per page'\r\n                                    },\r\n                                    native: true\r\n                                }}\r\n                                onPageChange={handleChangePage}\r\n                                ActionsComponent={(props) => <TablePaginationActions props={props} />}\r\n                            />\r\n                        </TableRow>\r\n                    </TableFooter>\r\n                </Table>\r\n            </TableContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CampaignList;\r\n"],"sourceRoot":""}