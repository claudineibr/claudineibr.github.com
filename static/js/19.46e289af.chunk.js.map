{"version":3,"sources":["views/utilities/TablePaginationActions.js","services/ployService.js","views/pages/ploy/List.js"],"names":["TablePaginationActions","props","theme","useTheme","count","page","rowsPerPage","onPageChange","sx","flexShrink","ml","onClick","event","disabled","direction","Math","ceil","max","basePath","fetchPloyList","companyCode","code","isLaunch","pageSize","useCache","dispatch","getState","moreFilter","url","apiService","get","response","setListPloys","console","error","message","postPloy","data","_dispatch","post","then","PloyList","ploys","useSelector","state","ploy","items","totalItems","totalPages","useDispatch","navigate","useNavigate","matchDownSM","useMediaQuery","breakpoints","down","useEffect","filter","fetchData","catch","React","setPage","columns","id","label","minWidth","align","emptyRows","container","alignItems","justifyContent","spacing","item","mb","xs","md","cursor","disableElevation","fullWidth","size","variant","color","component","Paper","map","column","style","row","index","scope","name","width","height","colSpan","length","rowsPerPageOptions","SelectProps","inputProps","native","_event","newPage","ActionsComponent"],"mappings":"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","file":"static/js/19.46e289af.chunk.js","sourcesContent":["import { useTheme } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport LastPageIcon from '@mui/icons-material/LastPage';\r\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TablePaginationActions(props) {\r\n    const theme = useTheme();\r\n    const { count, page, rowsPerPage, onPageChange } = props;\r\n\r\n    const handleFirstPageButtonClick = (event) => {\r\n        onPageChange(event, 0);\r\n    };\r\n\r\n    const handleBackButtonClick = (event) => {\r\n        onPageChange(event, page - 1);\r\n    };\r\n\r\n    const handleNextButtonClick = (event) => {\r\n        onPageChange(event, page + 1);\r\n    };\r\n\r\n    const handleLastPageButtonClick = (event) => {\r\n        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ flexShrink: 0, ml: 2.5 }}>\r\n            <IconButton onClick={handleFirstPageButtonClick} disabled={page === 0} aria-label=\"first page\">\r\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n            </IconButton>\r\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n            </IconButton>\r\n            <IconButton onClick={handleNextButtonClick} disabled={page >= Math.ceil(count / rowsPerPage) - 1} aria-label=\"next page\">\r\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n            </IconButton>\r\n            <IconButton onClick={handleLastPageButtonClick} disabled={page >= Math.ceil(count / rowsPerPage) - 1} aria-label=\"last page\">\r\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n            </IconButton>\r\n        </Box>\r\n    );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n    count: PropTypes.number,\r\n    onPageChange: PropTypes.func,\r\n    page: PropTypes.number,\r\n    rowsPerPage: PropTypes.number\r\n};\r\n\r\nexport default TablePaginationActions;\r\n","import apiService from './apiService';\nimport { setListPloys } from '../store/reducers/ployReducer';\n\nconst basePath = '/api/v1/ploy';\n\n/**\n * Fetch to company data\n * @async\n * @function\n * @return {Promise<JSON>} Object company data\n */\nexport function fetchPloyList({ companyCode = null, code = null, isLaunch = null, page = 1, pageSize = 50, useCache = true }) {\n    return async function fetchPloyThunk(dispatch, getState) {\n        let moreFilter = `&useCache=${useCache}`;\n        if (companyCode != null) {\n            moreFilter += `&companyCode=${companyCode}`;\n        }\n        if (code != null) {\n            moreFilter += `&code=${code}`;\n        }\n        if (isLaunch != null) {\n            moreFilter += `&isLaunch=${isLaunch}`;\n        }\n        try {\n            const url = `${basePath}/filter?pageSize=${pageSize}&page=${page}${moreFilter}`;\n            const response = await apiService(getState()).get(url);\n            await dispatch(setListPloys(response));\n            return response;\n        } catch (ex) {\n            console.error('fetchPloyList', ex.message);\n            return null;\n        }\n    };\n}\n\nexport function findPloy(code) {\n    return async function findPloyThunk(dispatch, getState) {\n        try {\n            const url = `${basePath}?pageSize=1&&code=${code}`;\n            const response = await apiService(getState()).get(url);\n            if (response) {\n                await dispatch(setListPloys(response));\n            }\n            return response;\n        } catch (ex) {\n            console.error('findPloy', ex.message);\n            return null;\n        }\n    };\n}\n\nexport function postPloy(data) {\n    return async function postPloyThunk(_dispatch, getState) {\n        try {\n            await apiService(getState())\n                .post(basePath, data)\n                .then((response) => response?.data);\n            return true;\n        } catch (ex) {\n            console.error('postPloy', ex.message);\n            throw ex;\n        }\n    };\n}\n","import * as React from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableFooter from '@mui/material/TableFooter';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport TableHead from '@mui/material/TableHead';\r\n\r\n// project imports\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { fetchPloyList } from 'services/ployService';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Button, useMediaQuery, Grid } from '@mui/material';\r\nimport AnimateButton from '../../../ui-component/extended/AnimateButton';\r\nimport TablePaginationActions from '../../utilities/TablePaginationActions';\r\n\r\n// ==============================|| SAMPLE PAGE ||============================== //\r\n\r\nfunction PloyList() {\r\n    const theme = useTheme();\r\n    const ploys = useSelector((state) => state.ploy);\r\n    const { items, totalItems, pageSize, totalPages } = ploys;\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const filter = { useCache: false };\r\n            await dispatch(fetchPloyList(filter));\r\n        }\r\n\r\n        fetchData().catch();\r\n    }, [dispatch]);\r\n\r\n    const [page, setPage] = React.useState(0);\r\n\r\n    const columns = [\r\n        { id: 'name', label: 'Residencial', minWidth: 170 },\r\n        { id: 'launch', label: 'Lançamento', minWidth: 70, align: 'center' },\r\n        { id: 'actions', label: 'Ações', minWidth: 30, align: 'center' }\r\n    ];\r\n\r\n    // Avoid a layout jump when reaching the last page with empty rows.\r\n    const emptyRows = totalItems > 10 ? Math.max(0, (1 + totalItems) * pageSize - totalItems) : 10;\r\n\r\n    const handleChangePage = (_event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleEdit = (item) => {\r\n        navigate('/ploy/manager', { state: { code: item.code } });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container alignItems=\"end\" sx={{ justifyContent: 'end' }} spacing={matchDownSM ? 0 : 2}>\r\n                <Grid item sx={{ mb: 1 }} xs={12} md={2}>\r\n                    <Box>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                sx={{ '& :hover': { cursor: 'pointer' } }}\r\n                                disableElevation\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                variant=\"contained\"\r\n                                color=\"success\"\r\n                                onClick={() => navigate('/ploy/manager', { state: { code: null } })}\r\n                            >\r\n                                Novo\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n            <TableContainer component={Paper}>\r\n                <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {columns.map((column) => (\r\n                                <TableCell key={`ploy_${column.id}`} align={column.align} style={{ minWidth: column.minWidth }}>\r\n                                    {column.label}\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {items.map((row, index) => (\r\n                            <TableRow key={`${row.name}_${index}`}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {row.name}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 60 }} align=\"center\">\r\n                                    {row.isLaunch ? 'SIM' : 'NÃO'}\r\n                                </TableCell>\r\n                                <TableCell sx={{ '& :hover': { cursor: 'pointer' } }} onClick={() => handleEdit(row)} align=\"center\">\r\n                                    <EditIcon />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n\r\n                        {emptyRows > 0 && (\r\n                            <TableRow style={{ height: 53 * emptyRows }}>\r\n                                <TableCell colSpan={6} />\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                    <TableFooter>\r\n                        <TableRow>\r\n                            <TablePagination\r\n                                colSpan={columns.length}\r\n                                count={totalPages}\r\n                                rowsPerPage={pageSize}\r\n                                page={page}\r\n                                rowsPerPageOptions={[pageSize]}\r\n                                SelectProps={{\r\n                                    inputProps: {\r\n                                        'aria-label': 'rows per page'\r\n                                    },\r\n                                    native: true\r\n                                }}\r\n                                onPageChange={handleChangePage}\r\n                                ActionsComponent={(props) => <TablePaginationActions props={props} />}\r\n                            />\r\n                        </TableRow>\r\n                    </TableFooter>\r\n                </Table>\r\n            </TableContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PloyList;\r\n"],"sourceRoot":""}