{"version":3,"sources":["hooks/useScriptRef.js","ui-component/images/ImagePanelUpload.js","views/utilities/ImageUtil.js","views/utilities/TextEditorRender.js","services/ployService.js","views/pages/ploy/Manager.js"],"names":["useScriptRef","scripted","useRef","useEffect","current","ImagePanelUpload","images","onChange","maxNumber","multiple","title","titleButton","renderAvatar","altImage","positionButtonHeader","theme","useTheme","matchDownSM","useMediaQuery","breakpoints","down","useState","currentImages","setCurrentImages","labelTitle","setLabelTitle","labelButton","setLabelButton","onChangeImages","imageList","renderButtonsFooterImage","index","onImageUpdate","onImageRemove","className","sx","color","green","onClick","fontSize","red","renderContentImage","container","justifyContent","alignItems","textAlign","mb","item","xs","sm","style","margin","border","borderWidth","length","alt","src","dataUrl","width","height","direction","marginTop","map","image","renderButtonAndTitle","onImageUpload","onImageRemoveAll","dragProps","spacing","marginBottom","paddingTop","fullWidth","disabled","disableElevation","size","variant","flexGrow","orientation","acceptType","value","items","dataURLKey","defaultProps","loadImages","multimedias","fetch","linkMedia","photo","ok","blob","photoBlob","reader","FileReader","onloadend","push","result","readAsDataURL","console","error","message","loadAsyncImages","setImageFunc","TextEditorRender","textValue","loadBody","setTextEditor","onInit","_evt","editor","onEditorChange","apiKey","process","init","plugins","imagetools_cors_hosts","toolbar","fontsize_formats","block_formats","content_style","image_caption","image_advtab","contextmenu","a11y_advanced_options","convert_urls","preview_styles","textcolor_rows","line_height_formats","basePath","fetchPloyList","companyCode","code","isLaunch","page","pageSize","useCache","dispatch","getState","moreFilter","url","apiService","get","response","setListPloys","postPloy","data","_dispatch","post","then","Manager","scriptedRef","editorRef","useDispatch","location","useLocation","navigate","useNavigate","useSelector","state","ploy","finalDate","initialDate","currentPloy","setCurrentPloy","checked","setChecked","tab","setTab","setImages","textEditor","errors","setErrors","imagesList","setValue","key","handleValidate","keysValidate","includes","setMessage","find","initialValue","currencyParser","startPriceDwelling","downloadImages","catch","handlePostData","postData","imagesPost","LinkHtmlDetail","getContent","currencyToFloat","action","actionButton","closeDialog","buttons","bgcolor","borderColor","borderBottom","textColor","indicatorColor","_event","newValue","scrollButtons","label","initialValues","onSubmit","_values","setStatus","setSubmitting","success","handleSubmit","isSubmitting","noValidate","control","event","target","name","type","e","crmId","typography","customInput","Boolean","id","mask","maskChar","formatDate","ISODateFormat","startDate","endDate","bedrooms","suites","livingRoom","bathrooms","kitchen","vacancies","meters","totalArea","utilArea","whatsapp","whatsappMessage","linkHtmlDetail","startsWith","mt","list"],"mappings":"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","file":"static/js/11.7cf7c998.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\n\n// ==============================|| ELEMENT REFERENCE HOOKS  ||============================== //\n\nconst useScriptRef = () => {\n    const scripted = useRef(true);\n\n    useEffect(\n        () => () => {\n            scripted.current = false;\n        },\n        []\n    );\n\n    return scripted;\n};\n\nexport default useScriptRef;\n","import { Avatar, Button, Divider, Grid, InputLabel, Stack, useMediaQuery } from '@mui/material';\r\nimport AnimateButton from '../extended/AnimateButton';\r\nimport ImageUploading from 'react-images-uploading';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport PropTypes from 'prop-types';\r\nimport { useEffect, useState } from 'react';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { green, red } from '@mui/material/colors';\r\nimport DeleteForever from '@mui/icons-material/DeleteForever';\r\nimport Cached from '@mui/icons-material/Cached';\r\n\r\nfunction ImagePanelUpload({\r\n    images,\r\n    onChange,\r\n    maxNumber = 8,\r\n    multiple = true,\r\n    title = null,\r\n    titleButton = null,\r\n    renderAvatar = false,\r\n    altImage = null,\r\n    positionButtonHeader = true\r\n}) {\r\n    const theme = useTheme();\r\n    const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\r\n    const [currentImages, setCurrentImages] = useState([]);\r\n    const [labelTitle, setLabelTitle] = useState(null);\r\n    const [labelButton, setLabelButton] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setLabelTitle(title);\r\n        setLabelButton(titleButton);\r\n        setCurrentImages(images);\r\n        return () => setCurrentImages([]);\r\n    }, [images]);\r\n\r\n    function onChangeImages(imageList) {\r\n        setCurrentImages(imageList);\r\n        onChange(imageList);\r\n    }\r\n\r\n    function getTitle() {\r\n        if (labelTitle == null) {\r\n            return (\r\n                <span>\r\n                    Somente imagens no formato <strong>.jpg</strong>\r\n                </span>\r\n            );\r\n        }\r\n        return <span>{labelTitle}</span>;\r\n    }\r\n    function getTitleButton() {\r\n        if (labelButton == null) {\r\n            return <>Importar</>;\r\n        }\r\n        return <>{labelButton}</>;\r\n    }\r\n\r\n    function renderButtonsFooterImage(index, onImageUpdate, onImageRemove) {\r\n        return (\r\n            <div className=\"image-item__btn-wrapper\">\r\n                <IconButton sx={{ color: green[500] }} onClick={() => onImageUpdate(index)} aria-label=\"Atualizar\">\r\n                    <Cached sx={{ fontSize: 26 }} />\r\n                </IconButton>\r\n                <IconButton sx={{ color: red[500] }} onClick={() => onImageRemove(index)} aria-label=\"Remover\">\r\n                    <DeleteForever sx={{ fontSize: 26 }} />\r\n                </IconButton>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    function renderContentImage(imageList, onImageUpdate, onImageRemove) {\r\n        if (renderAvatar && !multiple) {\r\n            return (\r\n                <Grid container justifyContent=\"center\" alignItems=\"center\" textAlign=\"center\" sx={{ mb: 4 }}>\r\n                    <Grid item xs={12} sm={12}>\r\n                        <div style={{ margin: 'auto', border: 1, borderWidth: 1 }}>\r\n                            {imageList !== null && imageList.length > 0 ? (\r\n                                <>\r\n                                    <Avatar alt={altImage} src={imageList[0].dataUrl} sx={{ width: 100, height: 100, margin: 'auto' }} />\r\n                                    {renderButtonsFooterImage(0, onImageUpdate, onImageRemove)}\r\n                                </>\r\n                            ) : (\r\n                                <Avatar alt={altImage} src={null} sx={{ width: 100, height: 100, margin: 'auto' }} />\r\n                            )}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        }\r\n        return (\r\n            <Grid container direction=\"row\" marginTop={2}>\r\n                {imageList !== null &&\r\n                    imageList?.map((image, index) => (\r\n                        <Grid key={`iamge_item_${index}`} item xs={4} sm={4} textAlign=\"center\">\r\n                            <img src={image.dataUrl} alt=\"\" width=\"300\" height=\"180\" />\r\n                            {renderButtonsFooterImage(index, onImageUpdate, onImageRemove)}\r\n                        </Grid>\r\n                    ))}\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    function renderButtonAndTitle(onImageUpload, onImageRemoveAll, dragProps, imageList) {\r\n        if (renderAvatar && imageList.length > 0) {\r\n            return null;\r\n        }\r\n        return (\r\n            <>\r\n                <Grid container alignItems=\"center\" justifyContent=\"center\" spacing={matchDownSM ? 0 : 2}>\r\n                    <Grid\r\n                        item\r\n                        textAlign=\"center\"\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"center\"\r\n                        xs={12}\r\n                        sm={12}\r\n                        marginBottom={1}\r\n                        style={{ paddingTop: 0 }}\r\n                    >\r\n                        <span>{getTitle()}</span>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container alignItems=\"center\" justifyContent=\"center\" spacing={matchDownSM ? 0 : 2}>\r\n                    <Grid item xs={12} sm={renderAvatar && !multiple ? 6 : 2}>\r\n                        <AnimateButton>\r\n                            <Button\r\n                                fullWidth\r\n                                disabled={currentImages.length === maxNumber}\r\n                                disableElevation\r\n                                size=\"small\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={onImageUpload}\r\n                                {...dragProps}\r\n                            >\r\n                                {getTitleButton()}\r\n                            </Button>\r\n                        </AnimateButton>\r\n                    </Grid>\r\n                    {multiple && (\r\n                        <Grid item xs={12} sm={2}>\r\n                            <AnimateButton>\r\n                                <Button\r\n                                    fullWidth\r\n                                    disableElevation\r\n                                    size=\"small\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={onImageRemoveAll}\r\n                                >\r\n                                    Remover todas\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Grid>\r\n                    )}\r\n                    <Grid item xs={12} sm={12}>\r\n                        <Divider sx={{ flexGrow: 1 }} orientation=\"horizontal\" />\r\n                    </Grid>\r\n                </Grid>\r\n            </>\r\n        );\r\n    }\r\n    return (\r\n        <ImageUploading\r\n            multiple={multiple}\r\n            acceptType={['jpg']}\r\n            value={currentImages || []}\r\n            onChange={(items) => onChangeImages(items)}\r\n            maxNumber={maxNumber}\r\n            dataURLKey=\"dataUrl\"\r\n        >\r\n            {({ imageList, onImageUpload, onImageRemoveAll, onImageUpdate, onImageRemove, dragProps }) => (\r\n                <Grid>\r\n                    {positionButtonHeader && renderButtonAndTitle(onImageUpload, onImageRemoveAll, dragProps, imageList)}\r\n                    {renderContentImage(imageList, onImageUpdate, onImageRemove)}\r\n                    {!positionButtonHeader && renderButtonAndTitle(onImageUpload, onImageRemoveAll, dragProps, imageList)}\r\n                </Grid>\r\n            )}\r\n        </ImageUploading>\r\n    );\r\n}\r\n\r\nImagePanelUpload.propTypes = {\r\n    images: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            dataUrl: PropTypes.string\r\n        })\r\n    ),\r\n    dataUrl: PropTypes.string,\r\n    imageList: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            dataURL: PropTypes.string,\r\n            file: PropTypes.object\r\n        })\r\n    ),\r\n    onChange: PropTypes.func,\r\n    setImages: PropTypes.func,\r\n    maxNumber: PropTypes.number,\r\n    multiple: PropTypes.bool\r\n};\r\n\r\nImagePanelUpload.defaultProps = {\r\n    maxNumber: 8\r\n};\r\n\r\nexport default ImagePanelUpload;\r\n","export default async function loadImages(multimedias) {\r\n    const images = [];\r\n    if (multimedias != null) {\r\n        await multimedias.map(async (item) => {\r\n            try {\r\n                const photo = await fetch(item.linkMedia);\r\n                if (photo.ok) {\r\n                    const photoBlob = await photo.blob();\r\n                    const reader = new FileReader();\r\n                    reader.onloadend = () => {\r\n                        images.push({ dataUrl: reader.result });\r\n                    };\r\n                    reader.readAsDataURL(photoBlob);\r\n                }\r\n            } catch (e) {\r\n                console.error(`Error download image: ${e.message} - ${item.linkMedia}`);\r\n            }\r\n            return images;\r\n        });\r\n    }\r\n    return images;\r\n}\r\n\r\nexport async function loadAsyncImages(multimedias, setImageFunc) {\r\n    if (multimedias != null) {\r\n        await multimedias.map(async (item) => {\r\n            try {\r\n                const photo = await fetch(item.linkMedia);\r\n                if (photo.ok) {\r\n                    const photoBlob = await photo.blob();\r\n                    const reader = new FileReader();\r\n                    reader.onloadend = () => {\r\n                        if (reader.result != null) {\r\n                            setImageFunc({ dataUrl: reader.result });\r\n                        }\r\n                    };\r\n                    reader.readAsDataURL(photoBlob);\r\n                }\r\n            } catch (e) {\r\n                console.error(`Error download async image: ${e.message} - ${item.linkMedia}`);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { Editor } from '@tinymce/tinymce-react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TextEditorRender({ textValue, loadBody, setTextEditor }) {\r\n    return (\r\n        <Editor\r\n            value={textValue}\r\n            onInit={(_evt, editor) => loadBody(editor)}\r\n            onEditorChange={(value) => {\r\n                setTextEditor(value);\r\n            }}\r\n            apiKey={process.env.REACT_APP_TINY_MCE_API_KEY}\r\n            init={{\r\n                height: 500,\r\n                plugins:\r\n                    'print preview paste importcss searchreplace autolink autosave save directionality code visualblocks visualchars ' +\r\n                    'fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime ' +\r\n                    'advlist lists wordcount imagetools textpattern noneditable help charmap quickbars emoticons visualblocks',\r\n                imagetools_cors_hosts: ['picsum.photos'],\r\n                toolbar:\r\n                    'bold italic underline strikethrough | fontselect fontsizeselect forecolor formatselect | alignleft aligncenter alignright alignjustify lineheight| ' +\r\n                    'outdent indent | numlist bullist | insertfile image media link | fullscreen  preview print |emoticons',\r\n                fontsize_formats: '8pt 10pt 11pt 12pt 14pt 18pt 24pt',\r\n                block_formats: 'Bloco=div;Paragrafo=p;Header 1=h1;Header 2=h2;Header 3=h3;Preformatted=pre',\r\n                content_style: 'body { font-family:Arial,Helvetica,sans-serif; font-size:14pt }',\r\n                image_caption: true,\r\n                image_advtab: true,\r\n                contextmenu: 'link image imagetools table configurepermanentpen',\r\n                a11y_advanced_options: true,\r\n                convert_urls: true,\r\n                preview_styles: false,\r\n                textcolor_rows: '4',\r\n                line_height_formats: '1 1.1 1.2 1.5'\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\nTextEditorRender.propTypes = {\r\n    textValue: PropTypes.string,\r\n    loadBody: PropTypes.func,\r\n    setTextEditor: PropTypes.func\r\n};\r\n\r\nexport default TextEditorRender;\r\n","import apiService from './apiService';\nimport { setListPloys } from '../store/reducers/ployReducer';\n\nconst basePath = '/api/v1/ploy';\n\n/**\n * Fetch to company data\n * @async\n * @function\n * @return {Promise<JSON>} Object company data\n */\nexport function fetchPloyList({ companyCode = null, code = null, isLaunch = null, page = 1, pageSize = 50, useCache = true }) {\n    return async function fetchPloyThunk(dispatch, getState) {\n        let moreFilter = `&useCache=${useCache}`;\n        if (companyCode != null) {\n            moreFilter += `&companyCode=${companyCode}`;\n        }\n        if (code != null) {\n            moreFilter += `&code=${code}`;\n        }\n        if (isLaunch != null) {\n            moreFilter += `&isLaunch=${isLaunch}`;\n        }\n        try {\n            const url = `${basePath}/filter?pageSize=${pageSize}&page=${page}${moreFilter}`;\n            const response = await apiService(getState()).get(url);\n            await dispatch(setListPloys(response));\n            return response;\n        } catch (ex) {\n            console.error('fetchPloyList', ex.message);\n            return null;\n        }\n    };\n}\n\nexport function findPloy(code) {\n    return async function findPloyThunk(dispatch, getState) {\n        try {\n            const url = `${basePath}?pageSize=1&&code=${code}`;\n            const response = await apiService(getState()).get(url);\n            if (response) {\n                await dispatch(setListPloys(response));\n            }\n            return response;\n        } catch (ex) {\n            console.error('findPloy', ex.message);\n            return null;\n        }\n    };\n}\n\nexport function postPloy(data) {\n    return async function postPloyThunk(_dispatch, getState) {\n        try {\n            await apiService(getState())\n                .post(basePath, data)\n                .then((response) => response?.data);\n            return true;\n        } catch (ex) {\n            console.error('postPloy', ex.message);\n            throw ex;\n        }\n    };\n}\n","import { useEffect, useState, useRef } from 'react';\r\n// third party\r\nimport { Formik } from 'formik';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Checkbox,\r\n    FormControlLabel,\r\n    FormHelperText,\r\n    Grid,\r\n    TextField,\r\n    Typography,\r\n    useMediaQuery,\r\n    Tab,\r\n    FormControl\r\n} from '@mui/material';\r\nimport TabContext from '@mui/lab/TabContext';\r\nimport TabList from '@mui/lab/TabList';\r\nimport TabPanel from '@mui/lab/TabPanel';\r\nimport InputMask from 'react-input-mask';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport AnimateButton from '../../../ui-component/extended/AnimateButton';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport useScriptRef from '../../../hooks/useScriptRef';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { currencyParser, currencyToFloat, formatDate, ISODateFormat } from '../../../utils/utility';\r\nimport { get } from 'axios';\r\nimport { postPloy } from '../../../services/ployService';\r\nimport PropTypes from 'prop-types';\r\nimport loadImages from '../../utilities/ImageUtil';\r\nimport { setMessage } from 'store/reducers/dialogReducer';\r\nimport ImagePanelUpload from '../../../ui-component/images/ImagePanelUpload';\r\nimport TextEditorRender from '../../utilities/TextEditorRender';\r\n\r\nfunction Manager() {\r\n    const theme = useTheme();\r\n    const scriptedRef = useScriptRef();\r\n    const editorRef = useRef(null);\r\n\r\n    const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const ploys = useSelector((state) => state.ploy);\r\n    const { items } = ploys;\r\n\r\n    const [currentPloy, setCurrentPloy] = useState({ finalDate: null, initialDate: null });\r\n    const [checked, setChecked] = useState(false);\r\n    const [tab, setTab] = useState('1');\r\n    const [images, setImages] = useState([]);\r\n    const [textEditor, setTextEditor] = useState('');\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    const handleChange = (_event, newValue) => {\r\n        setTab(newValue);\r\n    };\r\n\r\n    async function downloadImages(multimedias) {\r\n        const imagesList = await loadImages(multimedias);\r\n        setImages(imagesList);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTab('1');\r\n        const code = location.state?.code;\r\n        if (code != null) {\r\n            const ploy = items.find((item) => item.code === code);\r\n            if (ploy != null) {\r\n                setChecked(ploy.isLaunch);\r\n                setCurrentPloy({\r\n                    ...ploy,\r\n                    initialValue: currencyParser(ploy.startPriceDwelling)\r\n                });\r\n                const { multimedias } = ploy;\r\n                downloadImages(multimedias).catch();\r\n            }\r\n        }\r\n    }, [items]);\r\n\r\n    function loadBody(editor) {\r\n        editorRef.current = editor;\r\n        if (!['', null].includes(textEditor)) {\r\n            return;\r\n        }\r\n        if (currentPloy && currentPloy?.linkHtmlDetail && currentPloy?.linkHtmlDetail.startsWith('http')) {\r\n            get(currentPloy?.linkHtmlDetail)\r\n                .then((response) => {\r\n                    setTextEditor(response.data);\r\n                })\r\n                .catch((error) => console.error(`Error download html from ploy ${error.message}`));\r\n        }\r\n    }\r\n\r\n    function setValue(key, value) {\r\n        setCurrentPloy({ ...currentPloy, [key]: value });\r\n    }\r\n\r\n    async function handleValidate() {\r\n        const keysValidate = ['name', 'initialValue'];\r\n        setErrors(null);\r\n        const error = {};\r\n        let result = true;\r\n        // eslint-disable-next-line array-callback-return\r\n        keysValidate.map((key) => {\r\n            if (['', null].includes(currentPloy[key])) {\r\n                error[key] = 'Preenchimento obrigatório';\r\n                setErrors({ ...error });\r\n                dispatch(setMessage({ message: 'Os campos marcados com ( * ) são de preenchimento obrigatórios' }));\r\n                result = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    const handlePostData = async () => {\r\n        let postData = currentPloy;\r\n        const imagesPost = [];\r\n        if (editorRef.current) {\r\n            postData = { ...postData, LinkHtmlDetail: editorRef.current.getContent() };\r\n        }\r\n        images.map((item) => imagesPost.push(item.dataUrl));\r\n        postData = {\r\n            ...postData,\r\n            isLaunch: checked,\r\n            images: imagesPost,\r\n            startPriceDwelling: currencyToFloat(currentPloy?.initialValue)\r\n        };\r\n        const code = location.state.code;\r\n        try {\r\n            await dispatch(postPloy(postData));\r\n            const action = [{ title: 'Ok', actionButton: navigate('/ploy'), closeDialog: true }];\r\n            dispatch(setMessage({ message: `Registro ${code ? 'editado' : 'inserido'} com sucesso!`, buttons: action }));\r\n        } catch (ex) {\r\n            dispatch(setMessage({ message: `Erro ao ${code ? 'editar' : 'inserir'} o registro` }));\r\n            console.error('postPloy', ex.message);\r\n        }\r\n    };\r\n\r\n    function renderImageUpload() {\r\n        return <ImagePanelUpload images={images} onChange={(list) => setImages(list)} />;\r\n    }\r\n\r\n    function renderForm() {\r\n        return (\r\n            <>\r\n                <Formik\r\n                    initialValues={{ currentPloy }}\r\n                    onSubmit={async (_values, { setStatus, setSubmitting }) => {\r\n                        try {\r\n                            if (scriptedRef.current) {\r\n                                if (await handleValidate()) {\r\n                                    await handlePostData();\r\n                                    setStatus({ success: true });\r\n                                    setSubmitting(false);\r\n                                }\r\n                            }\r\n                        } catch (err) {\r\n                            if (scriptedRef.current) {\r\n                                setStatus({ success: false });\r\n                                setSubmitting(false);\r\n                                dispatch(setMessage({ message: err.message }));\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    {({ handleSubmit, isSubmitting }) => (\r\n                        <form noValidate onSubmit={handleSubmit}>\r\n                            <Grid container alignItems=\"center\">\r\n                                <Grid item xs={12} sm={2}>\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Checkbox\r\n                                                checked={checked}\r\n                                                onChange={(event) => setChecked(event.target.checked)}\r\n                                                name=\"checked\"\r\n                                                color=\"primary\"\r\n                                            />\r\n                                        }\r\n                                        label={<Typography variant=\"subtitle1\">Lançamento</Typography>}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={2}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        label=\"Referêcnia\"\r\n                                        margin=\"normal\"\r\n                                        name=\"crmId\"\r\n                                        type=\"number\"\r\n                                        onChange={(e) => setValue('crmId', e.target.value)}\r\n                                        value={currentPloy?.crmId}\r\n                                        sx={{ ...theme.typography.customInput }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            {/* ========================================= */}\r\n                            <Grid container spacing={matchDownSM ? 0 : 2}>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <FormControl fullWidth error={Boolean(errors && errors.name)} sx={{ ...theme.typography.customInput }}>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            label=\"Nome Empreendimento *\"\r\n                                            margin=\"normal\"\r\n                                            name=\"name\"\r\n                                            type=\"text\"\r\n                                            value={currentPloy?.name}\r\n                                            onChange={(e) => setValue('name', e.target.value)}\r\n                                            sx={{ ...theme.typography.customInput }}\r\n                                        />\r\n                                        {errors && errors.name && (\r\n                                            <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n                                                {errors.name}\r\n                                            </FormHelperText>\r\n                                        )}\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={2}>\r\n                                    <InputMask\r\n                                        mask=\"999.999,99\"\r\n                                        disabled={false}\r\n                                        maskChar=\"\"\r\n                                        value={currentPloy?.initialValue}\r\n                                        onChange={(e) => setValue('initialValue', e.target.value)}\r\n                                    >\r\n                                        {() => (\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                label=\"Valor Inicial *\"\r\n                                                margin=\"normal\"\r\n                                                name=\"initialValue\"\r\n                                                type=\"text\"\r\n                                                sx={{ ...theme.typography.customInput }}\r\n                                            />\r\n                                        )}\r\n                                    </InputMask>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={2}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        label=\"Início Obra *\"\r\n                                        margin=\"normal\"\r\n                                        name=\"startDate\"\r\n                                        type=\"date\"\r\n                                        value={formatDate(ISODateFormat(currentPloy?.startDate))}\r\n                                        onChange={(e) => setValue('startDate', e.target.value)}\r\n                                        sx={{ ...theme.typography.customInput }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={2}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        label=\"Fim Obra *\"\r\n                                        margin=\"normal\"\r\n                                        name=\"endDate\"\r\n                                        type=\"date\"\r\n                                        value={formatDate(ISODateFormat(currentPloy?.endDate))}\r\n                                        onChange={(e) => setValue('endDate', e.target.value)}\r\n                                        sx={{ ...theme.typography.customInput }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            {/* ========================================= */}\r\n                            <Grid container spacing={matchDownSM ? 0 : 2}>\r\n                                <Grid item xs={12} sm={2}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        label=\"Quartos *\"\r\n                                        margin=\"normal\"\r\n                                        name=\"fname\"\r\n                                        type=\"number\"\r\n                                        onChange={(e) => setValue('bedrooms', e.target.value)}\r\n                                        value={currentPloy?.bedrooms}\r\n                                        sx={{ ...theme.typography.customInput }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={2}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        label=\"Suítes *\"\r\n                                        margin=\"normal\"\r\n                                        type=\"number\"\r\n                                        value={currentPloy?.suites}\r\n                                        onChange={(e) => setValue('suites', e.target.value)}\r\n                                        sx={{ ...theme.typography.customInput }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={2}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        label=\"Sala *\"\r\n                                        margin=\"normal\"\r\n                                        type=\"number\"\r\n                                        value={currentPloy?.livingRoom}\r\n                                        onChange={(e) => setValue('livingRoom', e.target.value)}\r\n                                        sx={{ ...theme.typography.customInput }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={2}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        label=\"Banheiros *\"\r\n                                        margin=\"normal\"\r\n                                        type=\"number\"\r\n                                        value={currentPloy?.bathrooms}\r\n                                        onChange={(e) => setValue('bathrooms', e.target.value)}\r\n                                        sx={{ ...theme.typography.customInput }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={2}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        label=\"Cozinha *\"\r\n                                        margin=\"normal\"\r\n                                        type=\"number\"\r\n                                        value={currentPloy?.kitchen}\r\n                                        onChange={(e) => setValue('kitchen', e.target.value)}\r\n                                        sx={{ ...theme.typography.customInput }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={2}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        label=\"Vagas *\"\r\n                                        margin=\"normal\"\r\n                                        type=\"number\"\r\n                                        value={currentPloy?.vacancies}\r\n                                        onChange={(e) => setValue('vacancies', e.target.value)}\r\n                                        sx={{ ...theme.typography.customInput }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            {/* ========================================= */}\r\n                            <Grid container spacing={matchDownSM ? 0 : 2}>\r\n                                <Grid item xs={12} sm={2}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        label=\"Metros *\"\r\n                                        margin=\"normal\"\r\n                                        name=\"fname\"\r\n                                        type=\"number\"\r\n                                        onChange={(e) => setValue('meters', e.target.value)}\r\n                                        value={currentPloy?.meters}\r\n                                        sx={{ ...theme.typography.customInput }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={2}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        label=\"Área Total *\"\r\n                                        margin=\"normal\"\r\n                                        type=\"number\"\r\n                                        value={currentPloy?.totalArea}\r\n                                        onChange={(e) => setValue('totalArea', e.target.value)}\r\n                                        sx={{ ...theme.typography.customInput }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={2}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        label=\"Área Útil *\"\r\n                                        margin=\"normal\"\r\n                                        type=\"number\"\r\n                                        value={currentPloy?.utilArea}\r\n                                        onChange={(e) => setValue('utilArea', e.target.value)}\r\n                                        sx={{ ...theme.typography.customInput }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            {/* ========================================= */}\r\n                            <Grid container spacing={matchDownSM ? 0 : 2}>\r\n                                <Grid item xs={12} sm={2}>\r\n                                    <InputMask\r\n                                        mask=\"(99) 99999-9999\"\r\n                                        value={currentPloy?.whatsapp}\r\n                                        disabled={false}\r\n                                        maskChar=\" \"\r\n                                        onChange={(e) => setValue('whatsapp', e.target.value)}\r\n                                    >\r\n                                        {() => (\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                label=\"WhatsApp Corretor\"\r\n                                                margin=\"normal\"\r\n                                                name=\"fname\"\r\n                                                value={currentPloy?.whatsapp}\r\n                                                sx={{ ...theme.typography.customInput }}\r\n                                            />\r\n                                        )}\r\n                                    </InputMask>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={10}>\r\n                                    <TextField\r\n                                        fullWidth\r\n                                        label=\"Mensagem\"\r\n                                        margin=\"normal\"\r\n                                        type=\"text\"\r\n                                        value={currentPloy?.whatsappMessage}\r\n                                        onChange={(e) => setValue('whatsappMessage', e.target.value)}\r\n                                        sx={{ ...theme.typography.customInput }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            {/* ========================================= */}\r\n                            <Grid container spacing={matchDownSM ? 0 : 2}>\r\n                                <Grid item xs={12} sm={12}>\r\n                                    <TextEditorRender\r\n                                        textValue={textEditor}\r\n                                        loadBody={(editor) => loadBody(editor)}\r\n                                        setTextEditor={(value) => setTextEditor(value)}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Box sx={{ mt: 2 }}>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        disableElevation\r\n                                        disabled={isSubmitting}\r\n                                        fullWidth\r\n                                        size=\"large\"\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                    >\r\n                                        Salvar\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </Box>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Box xs={12} sm={12} sx={{ bgcolor: 'white', borderColor: 'divider' }}>\r\n            <TabContext value={tab}>\r\n                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                    <TabList\r\n                        textColor=\"secondary\"\r\n                        indicatorColor=\"secondary\"\r\n                        onChange={handleChange}\r\n                        variant=\"scrollable\"\r\n                        scrollButtons=\"auto\"\r\n                        aria-label=\"Tabs Ploy\"\r\n                    >\r\n                        <Tab label=\"Detalhes\" value=\"1\" />\r\n                        <Tab label=\"Imagens\" value=\"2\" />\r\n                    </TabList>\r\n                </Box>\r\n                <TabPanel value=\"1\">\r\n                    <>\r\n                        <span>Os campos marcados com ( * ) são de preenchimento obrigatórios</span>\r\n                        <br />\r\n                        {renderForm()}\r\n                    </>\r\n                </TabPanel>\r\n                <TabPanel value=\"2\">\r\n                    <>\r\n                        <br />\r\n                        {renderImageUpload()}\r\n                    </>\r\n                </TabPanel>\r\n            </TabContext>\r\n        </Box>\r\n    );\r\n}\r\n\r\nManager.propTypes = {\r\n    theme: PropTypes.shape({\r\n        typography: PropTypes.shape({\r\n            customInput: PropTypes.string\r\n        })\r\n    }),\r\n    currentPloy: PropTypes.shape({\r\n        bedrooms: PropTypes.number,\r\n        crmId: PropTypes.number,\r\n        name: PropTypes.string.isRequired,\r\n        livingRoom: PropTypes.number,\r\n        bathrooms: PropTypes.number,\r\n        kitchen: PropTypes.number,\r\n        vacancies: PropTypes.number,\r\n        meters: PropTypes.number,\r\n        startDate: PropTypes.string,\r\n        endDate: PropTypes.string,\r\n        linkHtmlDetail: PropTypes.string,\r\n        totalArea: PropTypes.number,\r\n        utilArea: PropTypes.number,\r\n        whatsapp: PropTypes.string,\r\n        whatsappMessage: PropTypes.string,\r\n        multimedias: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                imageBase64: PropTypes.string,\r\n                linkMedia: PropTypes.string\r\n            })\r\n        )\r\n    })\r\n};\r\n\r\nexport default Manager;\r\n"],"sourceRoot":""}