{"version":3,"sources":["views/utilities/TablePaginationActions.js","services/personService.js","../node_modules/@mui/icons-material/AddCircle.js","views/pages/person/List.js"],"names":["TablePaginationActions","props","theme","useTheme","count","page","rowsPerPage","onPageChange","sx","flexShrink","ml","onClick","event","disabled","direction","Math","ceil","max","basePath","fetchPersonList","profile","Profiles","Customer","pageSize","useCache","dispatch","getState","moreFilter","concat","url","apiService","get","response","setListPerson","console","error","message","fetchPersonByCode","code","updatePerson","updateDataPerson","data","post","uploadImage","dataUpdate","personCode","photoUrl","updateImage","_interopRequireDefault","require","Object","defineProperty","exports","value","default","_createSvgIcon","_jsxRuntime","_default","jsx","d","PersonList","others","person","useSelector","state","items","totalItems","totalPages","useDispatch","navigate","useNavigate","React","setPage","route","setRoute","setValue","useEffect","routeProfile","routeByProfile","fetchData","catch","columns","id","label","minWidth","align","emptyRows","title","secondary","color","green","fontSize","container","justifyContent","alignItems","item","lg","xs","md","sm","flexGrow","width","pr","pl","my","onChange","e","target","placeholder","startAdornment","position","stroke","size","palette","grey","inputProps","component","Paper","map","column","index","style","row","scope","spacing","alt","name","src","variant","fontWeight","email","phone","statusDescription","status","cursor","height","colSpan","length","rowsPerPageOptions","SelectProps","native","_event","newPage","ActionsComponent"],"mappings":"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","file":"static/js/14.52fe853e.chunk.js","sourcesContent":["import { useTheme } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport LastPageIcon from '@mui/icons-material/LastPage';\r\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TablePaginationActions(props) {\r\n    const theme = useTheme();\r\n    const { count, page, rowsPerPage, onPageChange } = props;\r\n\r\n    const handleFirstPageButtonClick = (event) => {\r\n        onPageChange(event, 0);\r\n    };\r\n\r\n    const handleBackButtonClick = (event) => {\r\n        onPageChange(event, page - 1);\r\n    };\r\n\r\n    const handleNextButtonClick = (event) => {\r\n        onPageChange(event, page + 1);\r\n    };\r\n\r\n    const handleLastPageButtonClick = (event) => {\r\n        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ flexShrink: 0, ml: 2.5 }}>\r\n            <IconButton onClick={handleFirstPageButtonClick} disabled={page === 0} aria-label=\"first page\">\r\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n            </IconButton>\r\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n            </IconButton>\r\n            <IconButton onClick={handleNextButtonClick} disabled={page >= Math.ceil(count / rowsPerPage) - 1} aria-label=\"next page\">\r\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n            </IconButton>\r\n            <IconButton onClick={handleLastPageButtonClick} disabled={page >= Math.ceil(count / rowsPerPage) - 1} aria-label=\"last page\">\r\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n            </IconButton>\r\n        </Box>\r\n    );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n    count: PropTypes.number,\r\n    onPageChange: PropTypes.func,\r\n    page: PropTypes.number,\r\n    rowsPerPage: PropTypes.number\r\n};\r\n\r\nexport default TablePaginationActions;\r\n","import apiService from './apiService';\r\nimport { setListPerson, updatePerson, updateImage } from 'store/reducers/personReducer';\r\nimport Profiles from '../views/utilities/Profiles';\r\n\r\nconst basePath = '/api/v1/person';\r\n\r\n/**\r\n * Fetch to person data\r\n * @async\r\n * @function\r\n * @return {Promise<JSON>} Object campaign data\r\n * @param profile\r\n * @param page\r\n * @param pageSize\r\n * @param useCache\r\n */\r\nexport function fetchPersonList(profile = Profiles.Customer, page = 1, pageSize = 50, useCache = false) {\r\n    return async function fetchPersonThunk(dispatch, getState) {\r\n        let moreFilter = `&useCache=${useCache}`;\r\n        moreFilter = moreFilter.concat(`&profileId=${profile}`);\r\n        try {\r\n            const url = `${basePath}/filter?pageSize=${pageSize}&page=${page}${moreFilter}`;\r\n            const response = await apiService(getState()).get(url);\r\n            await dispatch(setListPerson(response));\r\n            return response;\r\n        } catch (ex) {\r\n            console.error('Error Fetch Person', ex.message);\r\n            return null;\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Fetch person by code\r\n * @async\r\n * @function\r\n * @return {JSON} Object person data\r\n * @param code\r\n */\r\nexport function fetchPersonByCode(code) {\r\n    return async function fetchPersonThunk(dispatch, getState) {\r\n        try {\r\n            const url = `${basePath}/CompleteData/${code}`;\r\n            const response = await apiService(getState()).get(url);\r\n            await dispatch(updatePerson(response));\r\n            return response;\r\n        } catch (ex) {\r\n            console.error('Error Fetch Person', ex.message);\r\n            return null;\r\n        }\r\n    };\r\n}\r\n\r\nexport function updateDataPerson(data) {\r\n    return async function updatePersonThunk(dispatch, getState) {\r\n        try {\r\n            const response = await apiService(getState()).post(basePath, data);\r\n            if (response) {\r\n                await dispatch(updatePerson(response));\r\n                return true;\r\n            }\r\n            return false;\r\n        } catch (ex) {\r\n            console.error('Error Update Detail Person: ', ex.message);\r\n            throw ex;\r\n        }\r\n    };\r\n}\r\n\r\nexport function uploadImage(data) {\r\n    return async function uploadImageThunk(dispatch, getState) {\r\n        try {\r\n            const url = `${basePath}/updateImage`;\r\n            const response = await apiService(getState()).post(url, data);\r\n            if (response) {\r\n                const dataUpdate = { code: data.personCode, photoUrl: response };\r\n                await dispatch(updateImage(dataUpdate));\r\n                return true;\r\n            }\r\n            return false;\r\n        } catch (ex) {\r\n            console.error('Error Upload Image Person: ', ex.message);\r\n            throw ex;\r\n        }\r\n    };\r\n}\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"\n}), 'AddCircle');\n\nexports.default = _default;","import * as React from 'react';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableFooter from '@mui/material/TableFooter';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { Avatar, Grid, Paper, Typography, useMediaQuery, Stack, Chip, OutlinedInput, InputAdornment, Divider } from '@mui/material';\r\nimport { green } from '@mui/material/colors';\r\nimport { IconSearch } from '@tabler/icons';\r\nimport AddCircle from '@mui/icons-material/AddCircle';\r\nimport IconButton from '@mui/material/IconButton';\r\n\r\n// project imports\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport TablePaginationActions from 'views/utilities/TablePaginationActions';\r\nimport { fetchPersonList } from 'services/personService';\r\nimport { routeByProfile } from 'views/utilities/Profiles';\r\n\r\n// ==============================|| PERSON PAGE ||============================== //\r\n\r\nfunction PersonList({ ...others }) {\r\n    const theme = useTheme();\r\n    const person = useSelector((state) => state.person);\r\n    const { items, totalItems, pageSize, totalPages } = person;\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const [page, setPage] = React.useState(0);\r\n    const [route, setRoute] = React.useState('customer');\r\n    const [value, setValue] = React.useState('');\r\n\r\n    async function fetchData() {\r\n        const filter = { profile: others.profile };\r\n        await dispatch(fetchPersonList(others.profile));\r\n    }\r\n\r\n    useEffect(() => {\r\n        const routeProfile = routeByProfile(others.profile);\r\n        setRoute(`/${routeProfile}/manager`);\r\n        fetchData().catch();\r\n    }, [dispatch]);\r\n\r\n    const columns = [\r\n        { id: 'name', label: 'Nome', minWidth: 100, align: 'left' },\r\n        { id: 'phone', label: 'Telefone', minWidth: 100, align: 'center' },\r\n        { id: 'status', label: 'Staus', minWidth: 100, align: 'center' },\r\n        { id: 'actions', label: 'Ações', minWidth: 100, align: 'center' }\r\n    ];\r\n\r\n    // Avoid a layout jump when reaching the last page with empty rows.\r\n    const emptyRows = totalItems > 10 ? Math.max(0, (1 + totalItems) * pageSize - totalItems) : 10;\r\n\r\n    const handleChangePage = (_event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleEdit = (item) => {\r\n        navigate(route, { state: { code: item.code, profile: others.profile } });\r\n    };\r\n\r\n    function getColorStatus(status) {\r\n        if (status?.id === 1) {\r\n            return 'success';\r\n        }\r\n        return 'error';\r\n    }\r\n\r\n    return (\r\n        <MainCard\r\n            title={routeByProfile(others.profile)}\r\n            secondary={\r\n                <IconButton\r\n                    sx={{ color: green[500] }}\r\n                    onClick={() => navigate(route, { state: { code: null, profile: others.profile } })}\r\n                    aria-label=\"Novo\"\r\n                >\r\n                    <AddCircle sx={{ fontSize: 40 }} />\r\n                </IconButton>\r\n            }\r\n        >\r\n            <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n                <Grid item lg={4} xs={12} md={4} sm={12} sx={{ flexGrow: 1 }}>\r\n                    <OutlinedInput\r\n                        sx={{ width: '100%', pr: 1, pl: 2, my: 2 }}\r\n                        id=\"input-search-profile\"\r\n                        value={value}\r\n                        onChange={(e) => setValue(e.target.value)}\r\n                        placeholder=\"Pesquisar por: Nome e Telefone\"\r\n                        startAdornment={\r\n                            <InputAdornment position=\"start\">\r\n                                <IconSearch stroke={1.5} size=\"1rem\" color={theme.palette.grey[500]} />\r\n                            </InputAdornment>\r\n                        }\r\n                        aria-describedby=\"search-helper-text\"\r\n                        inputProps={{\r\n                            'aria-label': 'weight'\r\n                        }}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n            <Divider />\r\n            <TableContainer component={Paper}>\r\n                <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {columns.map((column, index) => (\r\n                                <TableCell\r\n                                    key={`person_${column.code}_${index}`}\r\n                                    align={column.align}\r\n                                    style={{ minWidth: column.minWidth }}\r\n                                >\r\n                                    {column.label}\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {items.map((row) => (\r\n                            <TableRow key={row.name}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    <Grid container spacing={1} alignItems=\"center\">\r\n                                        <Grid item>\r\n                                            <Avatar alt={row.name} src={row.photoUrl} />\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Stack>\r\n                                                <Stack direction=\"row\" spacing={0.5} alignItems=\"center\">\r\n                                                    <Typography component=\"span\" variant=\"h4\" sx={{ fontWeight: 400 }}>\r\n                                                        {row.name}\r\n                                                    </Typography>\r\n                                                </Stack>\r\n                                                <Typography variant=\"subtitle2\">{row.email}</Typography>\r\n                                            </Stack>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                                    {row.phone}\r\n                                </TableCell>\r\n                                <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                                    <Chip label={row.statusDescription} color={getColorStatus(row.status)} variant=\"outlined\" />\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    sx={{ '& :hover': { cursor: 'pointer' } }}\r\n                                    component=\"th\"\r\n                                    scope=\"row\"\r\n                                    onClick={() => handleEdit(row)}\r\n                                    align=\"center\"\r\n                                >\r\n                                    <EditIcon />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n\r\n                        {emptyRows > 0 && (\r\n                            <TableRow style={{ height: 53 * emptyRows }}>\r\n                                <TableCell colSpan={6} />\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                    <TableFooter>\r\n                        <TableRow>\r\n                            <TablePagination\r\n                                colSpan={columns.length}\r\n                                count={totalPages}\r\n                                rowsPerPage={pageSize}\r\n                                page={page}\r\n                                rowsPerPageOptions={[pageSize]}\r\n                                SelectProps={{\r\n                                    inputProps: {\r\n                                        'aria-label': 'rows per page'\r\n                                    },\r\n                                    native: true\r\n                                }}\r\n                                onPageChange={handleChangePage}\r\n                                ActionsComponent={(props) => <TablePaginationActions props={props} />}\r\n                            />\r\n                        </TableRow>\r\n                    </TableFooter>\r\n                </Table>\r\n            </TableContainer>\r\n        </MainCard>\r\n    );\r\n}\r\n\r\nexport default PersonList;\r\n"],"sourceRoot":""}